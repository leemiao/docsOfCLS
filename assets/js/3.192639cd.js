(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{399:function(t,s,a){t.exports=a.p+"assets/img/environment_01.7fbde6d0.png"},400:function(t,s,a){t.exports=a.p+"assets/img/environment_02.04a57bac.png"},401:function(t,s,a){t.exports=a.p+"assets/img/environment_03.d635f401.png"},402:function(t,s,a){t.exports=a.p+"assets/img/environment_04.987e6cc9.png"},403:function(t,s,a){t.exports=a.p+"assets/img/environment_05.7f79721d.png"},404:function(t,s,a){t.exports=a.p+"assets/img/environment_06.4187385e.png"},405:function(t,s,a){t.exports=a.p+"assets/img/environment_07.4696e37c.png"},406:function(t,s,a){t.exports=a.p+"assets/img/environment_08.dead9051.png"},407:function(t,s,a){t.exports=a.p+"assets/img/environment_09.e10cc9cc.png"},408:function(t,s,a){t.exports=a.p+"assets/img/environment_10.27c44ba9.png"},409:function(t,s,a){t.exports=a.p+"assets/img/environment_11.3de2170f.png"},410:function(t,s,a){t.exports=a.p+"assets/img/environment_12.8db25a55.png"},411:function(t,s,a){t.exports=a.p+"assets/img/environment_13.4ae64344.png"},412:function(t,s,a){t.exports=a.p+"assets/img/environment_14.af778bbc.png"},413:function(t,s,a){t.exports=a.p+"assets/img/environment_15.12fb4f5b.png"},414:function(t,s,a){t.exports=a.p+"assets/img/environment_16.b914bacf.png"},415:function(t,s,a){t.exports=a.p+"assets/img/environment_17.373e30ad.png"},416:function(t,s,a){t.exports=a.p+"assets/img/environment_18.b7492fad.png"},417:function(t,s,a){t.exports=a.p+"assets/img/environment_19.af9cbb29.png"},418:function(t,s,a){t.exports=a.p+"assets/img/environment_20.e6af2715.png"},419:function(t,s,a){t.exports=a.p+"assets/img/environment_21.42acf145.png"},420:function(t,s,a){t.exports=a.p+"assets/img/environment_22.de0ba165.png"},421:function(t,s,a){t.exports=a.p+"assets/img/environment_23.f65b1c7e.png"},422:function(t,s,a){t.exports=a.p+"assets/img/environment_24.cc6d6833.png"},423:function(t,s,a){t.exports=a.p+"assets/img/environment_25.bf6c8403.png"},424:function(t,s,a){t.exports=a.p+"assets/img/environment_26.04677573.png"},425:function(t,s,a){t.exports=a.p+"assets/img/environment_27.3a5ffbd5.png"},426:function(t,s,a){t.exports=a.p+"assets/img/environment_28.e02bfb71.png"},427:function(t,s,a){t.exports=a.p+"assets/img/environment_29.95e0ec99.png"},428:function(t,s,a){t.exports=a.p+"assets/img/environment_30.88914c2c.png"},429:function(t,s,a){t.exports=a.p+"assets/img/environment_31.1513c95c.png"},430:function(t,s,a){t.exports=a.p+"assets/img/environment_32.d4b744e8.png"},431:function(t,s,a){t.exports=a.p+"assets/img/environment_33.9dbcb2f2.png"},442:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"编程环境配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程环境配置"}},[t._v("#")]),t._v(" 编程环境配置")]),t._v(" "),s("h2",{attrs:{id:"mac环境安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mac环境安装"}},[t._v("#")]),t._v(" mac环境安装")]),t._v(" "),s("p",[t._v("如果你的mac安装了homebrew，那么安装go是一件非常轻松的事情，只需要在Terminal中输入下面的代码即可一键安装")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("brew install go\n")])])]),s("p",[t._v("或者下载安装包")]),t._v(" "),s("p",[s("strong",[t._v("安装包下载地址：")])]),t._v(" "),s("p",[t._v("https://golang.google.cn/dl/")]),t._v(" "),s("p",[t._v("点开之后可以看到")]),t._v(" "),s("p",[s("img",{attrs:{src:a(399),alt:"img"}})]),t._v(" "),s("p",[t._v("下载你电脑中对应的版本即可，我的电脑是Apple M1芯片，所以，下载的是第二个，如果你的CPU是Intel芯片的，那么下载第三个。")]),t._v(" "),s("p",[t._v("下载之后像平时安装其他的一些软件一样，下一步下一步安装即可，这里不再演示。")]),t._v(" "),s("h2",{attrs:{id:"windows下安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows下安装"}},[t._v("#")]),t._v(" Windows下安装")]),t._v(" "),s("p",[t._v("windows系统下安装也是一样的，在下载页面下载对应的版本，然后点击下一步下一步安装即可")]),t._v(" "),s("p",[t._v("下载安装即可")]),t._v(" "),s("p",[s("img",{attrs:{src:a(400),alt:"img"}})]),t._v(" "),s("p",[t._v("安装完成之后，在CMD中输入go，可以看到很多命令提示，此时证明go已经安装成功，如果没有显示，则大概率是因为没有加入环境变量，手动加入环境变量即可。go在安装的时候一般会自动加入环境变量。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(401),alt:"img"}})]),t._v(" "),s("p",[t._v("输入 go version查看版本\n"),s("img",{attrs:{src:a(402),alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"配置gopath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置gopath"}},[t._v("#")]),t._v(" 配置GOPATH")]),t._v(" "),s("h3",{attrs:{id:"为什么要配置gopath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要配置gopath"}},[t._v("#")]),t._v(" 为什么要配置GOPATH")]),t._v(" "),s("p",[t._v("这里可以简单理解为go语言有两种开发模式，一种叫做GOPATH，另外一种叫做GO MODULE，这两种方式中GO MODULE是后来才有的，在萌新学习阶段直接使用GO MODULE可能会比较难以理解，因此前期学习使用GOPATH开发模式，随着知识的积累，学习了MODULE之后再采用GO MODULE就会比较轻松了")]),t._v(" "),s("h3",{attrs:{id:"mac环境下配置gopath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mac环境下配置gopath"}},[t._v("#")]),t._v(" Mac环境下配置GOPATH")]),t._v(" "),s("p",[t._v("先查看一下你的go现在的环境")]),t._v(" "),s("p",[t._v("打开Terminal，在Terminal中输入以下命令查看")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" env\n")])])]),s("p",[s("img",{attrs:{src:a(403),alt:"img"}})]),t._v(" "),s("p",[t._v("当前只需要关注被圈出来的三个位置，下面分别介绍它们三个的作用")]),t._v(" "),s("p",[t._v('GO111MODULE="off"')]),t._v(" "),s("p",[t._v("这个只需要注意：第一，你的go版本，如果你的go版本比较低（go version 1.11之前），则是没有这个东西的。")]),t._v(" "),s("p",[t._v('第二，前期的学习阶段基本是不涉及包，因此这个东西暂时可以不管，在后面学习阶段接触到包之后，就会知道它的作用了，这玩意在1.13之后应该默认状态是auto，但是在创建项目时可能会自动生成go.mod这个文件，它会影响你的项目运行，因此选择把它关闭是比较明智的选择，当然它并不是什么毒水猛兽，相反后面学习到包的时候它有很大的作用，总之，暂时用不上，并且很大可能会影响你的程序运行，所以，先把它给关掉。使用下面的命令将其关闭（截图中，我的已经关闭，正常安装之后显示的是GO111MODULE=""）')]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" env "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("w "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GO111MODULE=off"')]),t._v("\n")])])]),s("p",[t._v('GOPATH="xxxxxxxxxxxxxxx"')]),t._v(" "),s("p",[t._v("这个名叫GOPATH的就是我们需要配置的文件，可以看到我的已经被我配置好了，如果没有配置，默认则是用户目录下的go，这个GOPATH暂时可以理解为我们开发程序时所使用的工作空间，因此需要去配置到环境变量中，否则go它找不到，或者可能出现一些你看不懂的报错，当然你不配置也可能没问题，但是明智之选是去配置它（小白时期暂时这么理解就可以啦，随着学习的深入会慢慢理解它的作用），总之使用GOPATH这种“开发模式”的时候，是需要配置这个路径的。你想把它配置到哪个目录(文件夹)都可以。比如我就在用户目录下创建了一个名叫goWork的目录，以后代码就都写在这个目录下了。")]),t._v(" "),s("p",[t._v("下面来进行具体的配置操作：")]),t._v(" "),s("p",[t._v("首先观察一下自己的Terminal的标题位置是什么")]),t._v(" "),s("p",[s("img",{attrs:{src:a(404),alt:"img"}})]),t._v(" "),s("p",[t._v("如果你和我一样是zsh，那么环境变量配置文件需要写在zsh的配置文件中，如果你的不是zsh，是bash，则需要在bash的配置文件中配置，这里千万要注意一下，不然会发现配置之后，临时可能起了作用，过段时间怎么又变回来了。这里就涉及到shell解释器(zsh、bash都可以理解你Terminal中shell的解释器)，这个话题不在这里具体去探讨，如果感兴趣可以自己去搜索相关资料了解一下，以后配置其他的环境变量时，也需要注意这个点。")]),t._v(" "),s("p",[t._v("不管你的是zsh或者是bash，都先在Terminal中输入下面的命令，查看一下是否能找到环境变量配置文件（注意是在用户目录下输入下面的命令）")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("ls "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a\n")])])]),s("p",[s("img",{attrs:{src:a(405),alt:"img"}})]),t._v(" "),s("p",[t._v("如果你的是zsh，则找 .zshrc 这个文件，如果你的是 bash，则找 .bash_profile文件，它们是各自对应的环境变量配置文件。")]),t._v(" "),s("p",[t._v("这里以zsh为例来配置环境变量，其他的也是一样的配置方式，使用vim编辑器打开 .zshrc这个文件，如果没有这个文件，也是没问题的，会自动创建一个空文件来作为zsh的环境变量配置文件。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("vim "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zshrc\n")])])]),s("p",[s("img",{attrs:{src:a(406),alt:"img"}})]),t._v(" "),s("p",[t._v("回车之后会进入到环境变量配置文件中")]),t._v(" "),s("p",[s("img",{attrs:{src:a(407),alt:"img"}})]),t._v(" "),s("p",[t._v("这里面有一些其他的东西或者什么都没有，这都没有关系，不影响现在去配置GOPATH。按下键盘上的字母 i  键(这是vim编辑器的操作方法，按下字母 i 之后才可以编辑这个文件，想要了解vim编辑器可以自行搜索一下)。")]),t._v(" "),s("p",[t._v("进入到编辑状态之后，在最后一行增加一条")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("export GOPATH"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("$HOME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("goWork\n")])])]),s("p",[t._v("=号前面的按照我的方式写就可以，后面的可以设定为你自己想要配置的目录路径(路径一定要写对)，可以和我的不一样，我的这个是设定到用户目录下的goWork目录了。")]),t._v(" "),s("p",[t._v("编写完成之后，按下键盘上的 esc 按键，此时进入到vim编辑器的普通模式，想要退出，需要按下英文的冒号（直接按下英文冒号就行，不用管在哪按，注意一定是英文的，中文没有效果），按完之后是下图的效果")]),t._v(" "),s("p",[s("img",{attrs:{src:a(408),alt:"img"}})]),t._v(" "),s("p",[t._v("在冒号处输入wq，再回车即可")]),t._v(" "),s("p",[s("img",{attrs:{src:a(409),alt:"img"}})]),t._v(" "),s("p",[t._v("wq就是保存并退出的意思。此时就配置好了，可以使用下面命令查看一下")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("cat "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zshrc\n")])])]),s("p",[s("img",{attrs:{src:a(410),alt:"img"}})]),t._v(" "),s("p",[t._v("cat命令是查看这个文件的意思，查看到这个文件中已经有了追加的这一行配置就可以了，接下来还需要做最后一步，刷新一下配置文件，使用下面命令")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("source "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zshrc\n")])])]),s("p",[s("img",{attrs:{src:a(411),alt:"img"}})]),t._v(" "),s("p",[t._v("回车就可以了。")]),t._v(" "),s("p",[t._v("最后可以再输入 go env 查看一下GOPATH是否已经配置好。")]),t._v(" "),s("h3",{attrs:{id:"windows环境下配置gopath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows环境下配置gopath"}},[t._v("#")]),t._v(" Windows环境下配置GOPATH")]),t._v(" "),s("p",[t._v("在任意的位置创建一个文件夹，作为GOPATH的路径，文件夹的名字随意。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(412),alt:"img"}})]),t._v(" "),s("p",[t._v("在创建的工作目录下创建三个文件夹（注意文件夹的名称必须和下面一致），这一步可以现在做，也可以在之后创建项目之前做，")]),t._v(" "),s("p",[s("img",{attrs:{src:a(413),alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:a(414),alt:"img"}})]),t._v(" "),s("p",[t._v("关于工作目录的这三个文件夹的解释：")]),t._v(" "),s("p",[t._v("src：存放go源代码的地方")]),t._v(" "),s("p",[t._v("pkg：存储编译后生成的包文件")]),t._v(" "),s("p",[t._v("bin：存储生成的可执行文件")]),t._v(" "),s("p",[t._v("接下来右键此电脑")]),t._v(" "),s("p",[s("img",{attrs:{src:a(415),alt:"img"}})]),t._v(" "),s("p",[t._v("选择属性")]),t._v(" "),s("p",[s("img",{attrs:{src:a(416),alt:"img"}})]),t._v(" "),s("p",[t._v("你可能是这个界面，也可能和我的不一样，但是总之找到 '高级系统设置'，点击'高级系统设置'，进入到下面界面")]),t._v(" "),s("p",[s("img",{attrs:{src:a(417),alt:"img"}})]),t._v(" "),s("p",[t._v("在这个界面中，选择第三个 '高级' 选项卡，可以看到环境变量，点击它，进入到下面的界面")]),t._v(" "),s("p",[s("img",{attrs:{src:a(418),alt:"img"}})]),t._v(" "),s("p",[t._v("此时选择GOPATH，然后点击编辑，进入到下面的界面")]),t._v(" "),s("p",[s("img",{attrs:{src:a(419),alt:"img"}})]),t._v(" "),s("p",[t._v("在变量值这里输入你刚才创建的那个文件夹的路径，如果不知道路径怎么写，则可以先去刚才创建的那个文件夹中，在下图位置复制")]),t._v(" "),s("p",[s("img",{attrs:{src:a(420),alt:"img"}})]),t._v(" "),s("p",[t._v("总之把变量值换成刚才创建的文件夹的路径即可。然后点击确定，后面的所有环境变量配置页面都点击确定关闭即可。")]),t._v(" "),s("p",[t._v("配置完成之后，在CMD中输入 go env，就可以看到配置的工作目录了")]),t._v(" "),s("p",[s("img",{attrs:{src:a(421),alt:"img"}})]),t._v(" "),s("h1",{attrs:{id:"安装goland-vscode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装goland-vscode"}},[t._v("#")]),t._v(" 安装goland/vscode")]),t._v(" "),s("p",[t._v("goland官网地址：")]),t._v(" "),s("p",[t._v("https://www.jetbrains.com/go/download/download-thanks.html?platform=windows")]),t._v(" "),s("p",[t._v("官网下载")]),t._v(" "),s("p",[s("img",{attrs:{src:a(422),alt:"img"}})]),t._v(" "),s("p",[t._v("双击运行")]),t._v(" "),s("p",[s("img",{attrs:{src:a(423),alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:a(424),alt:"img"}})]),t._v(" "),s("p",[t._v("可以修改为自己想要安装的位置")]),t._v(" "),s("p",[s("img",{attrs:{src:a(425),alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:a(426),alt:"img"}})]),t._v(" "),s("p",[t._v("后面就都是next就可以了")]),t._v(" "),s("p",[s("img",{attrs:{src:a(427),alt:"img"}})]),t._v(" "),s("p",[t._v("总结：其实什么都不用管，一路Next安装完成即可。")]),t._v(" "),s("h2",{attrs:{id:"goland使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#goland使用"}},[t._v("#")]),t._v(" goland使用")]),t._v(" "),s("p",[t._v("初次打开是下图这样")]),t._v(" "),s("p",[s("img",{attrs:{src:a(428),alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:a(429),alt:"img"}})]),t._v(" "),s("p",[t._v("点击创建一个新的项目，这个Location注意选择，之前个GOPATH的路径即可")]),t._v(" "),s("p",[s("img",{attrs:{src:a(430),alt:"img"}})]),t._v(" "),s("p",[t._v("在这个界面中可以更改文件保存的位置，点击create创建")]),t._v(" "),s("p",[s("img",{attrs:{src:a(431),alt:"img"}})]),t._v(" "),s("h1",{attrs:{id:"第一个go程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一个go程序"}},[t._v("#")]),t._v(" 第一个go程序")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello世界"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("逐行解释：")]),t._v(" "),s("p",[t._v("package main 申明main包，每个go语言源文件都是一个包，必须申明，package是申明包关键字")]),t._v(" "),s("p",[t._v("​                           一个go语言程序必须有且仅有一个main包，这是go语言的入口")]),t._v(" "),s("p",[t._v('import "fmt" 导入格式化输入输出包，使用Println打印需要这个包，使用goland编辑的话可以自动导入')]),t._v(" "),s("p",[t._v("func main() 申明主函数，入口程序，一个main包有且仅有一个mian函数")]),t._v(" "),s("p",[t._v('fmt.Println("hello世界")    输出文字')]),t._v(" "),s("p",[t._v("对于萌新小白来说，这里可以先不用都了解是做什么的，先照着写下来然后运行看到效果最重要。")])])}),[],!1,null,null,null);s.default=e.exports}}]);